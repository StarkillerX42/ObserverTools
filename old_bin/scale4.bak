#!/usr/bin/env python
#
# The code predicts plate scale based on ambient Temperature 
#
# Use as:   scale4 -t 10 -p 7815 -n   (usually 1st time)
#     or:   scale4 -t 10 -p 7815      (next time for this plate)
#
# History:
#  4 July 2014: written by dmbiz
#
# ask dmbiz

import time,string,os
#-import posix
import argparse
import glob
from apo_radec2altaz import apo_airmass
from math import sin,cos,tan,pi,fabs,sqrt,fmod
import RO.Astro.Tm.UTCFromPySec

w_dir = '/home/observer/tmp_scale/'

plate_r = 1.49  #-- size of the plate in degrees

#======================================

tt = str(time.time()) 
Tstamp = tt[len(tt) - 5 : len(tt)]
#-file_tmp1 = 'logfile_tmp_all.txt' + Tstamp

d2r = pi/180.

##-- Elena's module
#def sjd():
#  TAI_UTC =36; sjd1=(time.time() + TAI_UTC) / 86400.0 + 40587.3;
#  sjd= int(sjd1)
#  return sjd

#def get_plates():
#  smjd = str( sjd() )
#  h = 'mapper@plate-mapper3:~/scan/' + smjd + '/plPlugMapM*par'
#  ret_code = os.system ('cd ' + w_dir + ' ; scp -q -p ' + h + ' .')
#  if ret_code != 0:
#    print 'ERROR: cannot copy files: try again'

def get_plates(pl):
  #-smjd = str( sjd() )
  spl = str(pl)
  h = 'observer@plate-mapper3:~mapper/scan/?????/plPlugMapM-' + pl + '*par'
  ret_code = os.system ('cd ' + w_dir + ' ; scp -q -p ' + h + ' .')
  if ret_code != 0:
    print 'ERROR: cannot copy files: try again'

def getFiles(f):
  #- Elena's script
  files = glob.glob(f)
  return sorted(files)  

def t_jd():
  #-get T_JD from MJD
  #-return 2400000.5 + sjd()
  mjd0 = RO.Astro.Tm.UTCFromPySec
  #-print '===>  ',mjd0.utcFromPySec()
  return 2400000.5 +  mjd0.utcFromPySec()


#def lambda_sun():
#  ## Approximation from Meeus. Good to 0.01 degree
#  # k = 2*/360
#  k=d2r
#  TT = (t_jd() - 2451545.0) / 36525.
#  ### mean anomaly, degree
#  MM = 357.52910 + 35999.05030*TT - 0.0001559*TT*TT - 0.00000048*TT*TT*TT
#  ### mean longitude, degree
#  L0 = 280.46645 + 36000.76983*TT + 0.0003032*TT*TT 
#  DL = (1.914600 - 0.004817*TT - 0.000014*TT*TT)*sin(k*MM) + (0.019993 - 0.000101*TT)*sin(k*2*MM) + 0.000290*sin(k*3*MM)
#  ### true longitude, degree
#  return L0 + DL 

def get_pars(par):
  # get   t,pha,palt,ra,dec from the par file

  fi1 = open(par, 'r')
  inList = fi1.readlines()
  fi1.close()
  t = -20
  pha = -1000.
  palt = -1000.
  ra = -1000.
  dec = -1000.
  for st in inList:
    a = st.split()
    if len(a) > 1:
      if a[0] == 'temp':
        t = float(a[1])
      if a[0] == 'raCen':
        ra = float(a[1])
      if a[0] == 'decCen':
        dec = float(a[1])
      if a[0] == 'ha':
        pha = float(a[1])
        palt = float(a[2])

  return t,pha,palt,ra,dec
#--

#def refra(al):
#  #- Returns refraction in arcmin for altitude in degrees
#  # see Bennett (1982)
#  ar = al + 7.31 / (al + 4.4)
#  return cos(d2r * ar) / sin(d2r * ar)

def aberration(ra,dec):
  # Returns aberration at ra,dec position

  ## Approximation to solar coords from Meeus. Good to 0.01 degree
  # k = 2*/360
  ## Conversion to Aberration: Permanent Part of Astro Calendar, p.43
  k = d2r
  kab = 20.496  #- aberration constant in arcsec

  TT = (t_jd() - 2451545.0) / 36525.
  ### mean anomaly, degree
  MM = 357.52910 + 35999.05030*TT - 0.0001559*TT*TT - 0.00000048*TT*TT*TT
  ### mean longitude, degree
  L0 = 280.46645 + 36000.76983*TT + 0.0003032*TT*TT 
  ## unclear about mising k and d2r, but apparently k is used AS d2r
  #DL = (1.914600 - 0.004817*TT - 0.000014*TT*TT)*sin(d2r*k*MM) \
  #+ (0.019993 - 0.000101*TT)*sin(d2r*k*2.*MM) + 0.000290*sin(d2r*k*3.*MM)
  DL = (1.914600 - 0.004817*TT - 0.000014*TT*TT)*sin(k*MM) \
  + (0.019993 - 0.000101*TT)*sin(k*2.*MM) + 0.000290*sin(k*3.*MM)

  ### true longitude, degree
  LL = L0 + DL 

  eps = 23.0 + 26.0/60. + 21.448/3600. \
  - (46.8150*TT + 0.00059*TT*TT - 0.001813*TT*TT*TT)/3600. 
  #- c1 = ( cos(d2r*ra)/cos(d2r*dec) )/15.
  #- d1 = ( sin(d2r*ra)/cos(d2r*dec) )/15.
  #-c1 = ( cos(d2r*ra)/cos(d2r*dec) )
  #-d1 = ( sin(d2r*ra)/cos(d2r*dec) )
  #-c2 = tan(d2r*eps)*cos(d2r*dec) - sin(d2r*ra)*sin(d2r*dec)
  #-d2 = cos(d2r*ra)*sin(d2r*dec)

  c1 = cos(d2r*ra)/cos(d2r*dec)
  d1 = sin(d2r*ra)/cos(d2r*dec)
  c2 = tan(d2r*eps)*cos(d2r*dec) - sin(d2r*ra)*sin(d2r*dec)
  d2 = cos(d2r*ra)*sin(d2r*dec)

  CC = -kab * cos(d2r*LL)*cos(d2r*eps)
  DD = -kab * sin(d2r*LL)

  d_ra = CC*c1 + DD*d1
  d_dec= CC*c2 + DD*d2

  aber = sqrt(d_ra**2 + d_dec**2)
  #-print '==> Aber =',c1,d1,c2,d2,d_ra,d_dec,aber
  #-print L0,DL,LL,fmod(LL,360.)
  #-print CC,DD

  return aber

def refra(al):
  #- Returns refraction in arcmin for altitude in degrees
  # see Bennett (1982)
  #
  # Alternative: ar2 = al + 10.3 / (al + 5.11)
  # return C_P * 1.02 * cos(d2r * ar2) / sin(d2r * ar2)
  #
  #
  ar = al + 7.31 / (al + 4.4)
  C_P = 0.7*283./(273. + 10.)  #-- scale factor for the pressure
  return C_P * cos(d2r * ar) / sin(d2r * ar)



def get_scale(dt, pha,ha,palt,alt):
  #-- Estimate new plate scale given dt, dha, dalt
  #--- Need to work more on the constants!

  #-- temperature part
  #--sc_t = dt * 0.004
  #-- Aluminum: 0.00222  Dural: 0.0024
  #-const_add = 0.012
  const_add = 0.

  #-sc_t = dt * 0.003
  sc_t = dt * 0.0022

  #-- altitude part
  #-ref_con = 0.5 * 35.4/(3.*60.)
  #-ref_con = 18.4/(3.*60.)
  ref = refra(alt - plate_r) - refra(alt + plate_r)
  pref = refra(palt - plate_r) - refra(palt + plate_r)
  #-ref = refra(alt)
  #-pref = refra(palt)
  sc_a = 100. * (ref - pref)/(plate_r*60.)

  p_r05 = 0.5*plate_r
  sc_aber = 100. * (aberration(ra - p_r05,dec - p_r05) - \
                    aberration(ra + p_r05,dec + p_r05) )/(plate_r*3600.)
  sc_aber = fabs(sc_aber)
  #-print 'Aberration introduces %10.6f' % (sc_aber)

  #--- uncomment to see parameters ---
  #-print 'Alt  PAlt  ref  Pref  ref-Pref   sc_a'
  #-print alt, palt, ref, pref, ref - pref, sc_a
  print 'Alt %5.1f PlanAlt %5.1f' % (alt, palt)

  #---sc_a = 0.
  #--sc_a = - ref_con * cos(d2r * alt) * sin( d2r * (ha - pha))
  #-sc_a = ref_con * (cos(d2r * alt) - cos(d2r * palt))

  print '*** Calculated values ***'
  print ' Thermal %8.5f / Refraction %8.5f / Aberration %8.5f' % (sc_t, sc_a, sc_aber)
  #---return const_add + sc_t + sc_a
  #--return const_add + sc_t + sc_a, sc_t, sc_a
  #-return sc_t + sc_a + sc_aber, sc_t, sc_a, sc_aber
  return sc_t + sc_a, sc_t, sc_a, sc_aber



#--- MAIN ---
desc = 'scale predictor'
parser = argparse.ArgumentParser(description=desc)
#parser.add_argument('-m', '--mjd',  help='enter mjd, default is current mjd',
#           default=int(sjd), type=int)

parser.add_argument('-t', '--t', help='Ambient temperature, in C',
    default=-20., type=float)
parser.add_argument('-p', '--p', help='Plate, e.g. 7700',
    default=0, type=int)
parser.add_argument('-f', '--f', help='Focus, e.g. 350',
    default=-5000., type=float)
parser.add_argument('-n', '--n', action="store_true", 
    help='Do not refresh plate files')

args = parser.parse_args()    
#mjd=args.t

print
if args.t < -19. or args.p < 1:
  print 'Both Plate and Temperature must be set'
  print 'Syntax: scale4 -t 14.0 -p 7815 [-f 100]'
else:
  print 'Input: T = ',args.t, 'plate =',args.p

  spl = str(args.p)
  if args.n == True:
    get_plates(spl)

  #plates = os.system('ls ' + w_dir + 'plPlugMapM-' + spl + '*.par')
  st2 = w_dir + 'plPlugMapM-' + spl + '*.par'

  plates = getFiles(st2)
  np = len(plates)
  if np > 0:
    par = plates[np -1 ]
    fil20 = par.split('/')
    fil2 = fil20[len(fil20) - 1]
    print 'Use file: ',fil2

    t,pha,palt,ra,dec = get_pars(par)
    dt = args.t - t
    astr = apo_airmass()
    b_astr = astr.radec2altaz(ra,dec)    
    ha = b_astr[0]
    alt = b_astr[3]
    dtime = (pha - ha)*4.*60.
    b_plan = astr.radec2altaz_t(ra,dec,dtime)
    palt = b_plan[3]

    #-print dt,pha,ha,palt,alt
    print '*** Tech Information ***'
    print 'Design  Temperature,C   HA,deg  : ',t, pha
    #- new_scale, new_scale_t, new_scale_r = get_scale(dt, pha,ha,palt,alt)
    print 'HA now: ', ha
    new_scale, new_scale_t, new_scale_r, new_scale_aber = \
    get_scale(dt, pha,ha,palt,alt)

    #-new_scale_t = get_scale(dt, 0.,0.,90.,90.)
    #-print ' ** Thermal part only:'
    #-print 'Predicted scale: ',1. + 1.e-2*new_scale_t, ' (tcc)   ', new_scale_t*1.e4, ' (Russell speaking)'
    #-print ' ** With refraction: '
    #0print
    print
    print '*** PREDICTED ABSOLUTE SCALE VALUE ***'
    #-print 'Predicted scale: ',1. + 1.e-2*new_scale, ' (tcc)   ', new_scale*1.e4, ' (Russell speaking)'
    #-print 'Diff from 1.00: ',new_scale, ' (% tcc)   ', new_scale*1.e4, ' Russell speaking'
    print 'Predicted Absolute scale: %8.5f (tcc) %5i (Russell speaking)' % (1. + 1.e-2*new_scale , new_scale*1.e4)
    print 'Difference from 1.00000 : %8.5f (percent tcc) ' % new_scale
    print '*** IT IS REPORTED WITHOUT ABERRATION ***'
    #--print 'Predicted Absolute scale: %8.5f (tcc) %5i (Russell speaking)' % (1. + 1.e-2*new_scale , new_scale*1.e4)
    print '*** Try now empirical equation: scale = predicted + focus/2 + 95'
    #-print '*** Try now empirical equation: scale = predicted + focus/2 - 75'
    if args.f != -5000.:
      #-print '==> In this case it is %5i (Russell-STUI speaking)' % (new_scale*1.e4 + 0.5*args.f - 75)
      print '==> In this case it is %5i (Russell-STUI speaking)' % (new_scale*1.e4 + 0.5*args.f + 95)
    print ' Note that the first cartridge is usually ~ 5C warmer!'

    print

  else:
    print 'ERROR: I cannot see par file. Try running me with -n  option'
    print ' Also, may be this plate is not in the plan tonight?'

#- mjd=sjd()
#-print '-- OK --'
