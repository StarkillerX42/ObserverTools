#!/usr/bin/env python3
"""
Description:	Opens and continuously updates ds9 with the latest
                spectrograph files

History:		May 17, 2009	Jon Brinkmann	Apache Point Observatory
                Created file

Notes:			Uses the latest SJD
"""
'''
Traceback (most recent call last):
  File "./spds9.py", line 198, in <module>
    s.update()
  File "./spds9.py", line 125, in update
    file = self.latest_fits_file (self.patterns[frame])
  File "./spds9.py", line 83, in latest_fits_file
    for file in listdir (self.dir) :
  File "/usr/local/lib/python2.6/dircache.py", line 28, in listdir
    mtime = os.stat(path).st_mtime
OSError: [Errno 2] No such file or directory: '/data/spectro/55461'
'''
from dircache import listdir
from pyds9 import *
from optparse import OptionParser
from os import getpid, path, stat
from stat import ST_MTIME
from time import sleep, time

verbose = False


def sjd():
    """Calculate SDSS Modified Julian Date (SJD)"""

    TAI_UTC = 34  # TAI-UTC = 34 seconds as of 1/1/09
    return int((time() + TAI_UTC) / 86400.0 + 40587.3)


class spds9:
    """Displays the last image from each of the spectrograph cameras in ds9"""

    def __init__(self, fits_dir='', target='', scale='histequ', zoom='fit'):

        #	Constants and variables

        self.patterns = ['-b2-', '-b1-', '-r1-', '-r2-']
        self.npatterns = len(self.patterns)
        self.last_files = []
        for frame in range(0, self.npatterns):
            self.last_files.append('')

        #	Arguments

        if fits_dir:
            tmp = fits_dir.split('/')  # Check if SJD directory is specified
            if tmp[len(tmp) - 1].isdigit():
                self.dir = fits_dir
            else:  # If not specified, use the current SJD
                self.dir = '%s/%d' % (fits_dir, sjd())
        else:
            self.dir = '/data/spectro/%s' % sjd()

        if target:
            self.target = target
        else:
            self.target = 'spds9.%s' % getpid()

        self.scale = scale
        self.zoom = zoom

        if verbose:
            print('dir = %s\ntarget = %s\nscale = %s\nzoom = %s' %
                  (self.dir, self.target, self.scale, self.zoom))

        #	Initialize

        self.ds9 = ds9(self.target)

    def is_fits(self, filename):
        """Returns whether a file is a FITS file based on its extension"""

        length = len(filename)
        if filename.rfind('.fit') == (length - 4) or \
                filename.rfind('.fits') == (length - 5) or \
                filename.rfind('.fit.gz') == (length - 7) or \
                filename.rfind('.fits.gz') == (length - 8):
            return True
        else:
            return False

    def latest_fits_file(self, pattern):
        '''Returns the latest FITS file matching <pattern>'''

        max_time = -1
        fits_filename = ''

        #	Obtain the files in the directory and add the full path to them

        for file in listdir(self.dir):
            file = path.join(self.dir, file)

            #	See if the file name matches the pattern and the file is a FITS file

            if (file.find(pattern) > 0) and self.is_fits(file):
                #				print max_time, file, mtime

                #	Store the name and mtime of only the latest FITS file

                mtime = stat(file)[ST_MTIME]
                if max_time < mtime:
                    fits_filename = file
                    max_time = mtime

        return fits_filename

    #		return sorted (fits_files.items(), key=lambda (k,v): (v,k), reverse=True)[0][0]

    def display(self, file, frame):
        """Display <file> in <frame> with optional scaling and zoom"""

        if frame >= 0 and file != '':
            self.ds9.set('frame %s' % frame)
            self.ds9.set('file %s' % file)

            if zoom:
                self.ds9.set('zoom to %s' % self.zoom)

            if scale:
                self.ds9.set('scale %s' % self.scale)

    def update(self):
        """Update the display tiled horizontally with all spectrograph cameras"""
        self.ds9.set('tile')
        self.ds9.set('tile yes')
        self.ds9.set('tile mode row')
        self.ds9.set('tile grid')
        self.ds9.set('tile grid mode manual')
        self.ds9.set('tile grid layout %s 1' % self.npatterns)
        self.ds9.set('tile grid gap 5')

        for frame in range(0, self.npatterns):
            file = self.latest_fits_file(self.patterns[frame])
            if verbose:
                print(frame, file, self.last_files[frame])
            if file != self.last_files[frame]:
                self.display(file, frame)
                self.last_files[frame] = file


# If run as a program, start here

if __name__ == '__main__':

    #	Define command line options

    parser = OptionParser(version="%prog 1.1")
    parser.add_option('-d', '--directory', dest='fits_dir', default=None,
                      type='string',
                      help='Set FITS data directory. Default is '
                           '/data/spectro/<SJD>')
    parser.add_option('-t', '--target', dest='target', default=None,
                      type='string',
                      help='Set ds9 target. Default is autogenerated.')
    parser.add_option('-a', '--autoupdate', action='store_true',
                      dest='auto_mjd',
                      default=False, help='Auto update SJD.  Default is False.')
    parser.add_option('-i', '--interval', dest='interval', default=30,
                      type='int', help='Set the refresh rate.	Default is 30 '
                                       'seconds. Refreshes will be this '
                                       'number of seconds apart.')
    parser.add_option('-s', '--scale', dest='scale', default='histequ',
                      type='string', help='Set scaling. Default is "histequ"')
    parser.add_option('-v', '--verbose', action='store_true', dest='verbose',
                      default=False,
                      help='Be verbose.  Default is to be quiet.')
    parser.add_option('-z', '--zoom', dest='zoom', default='0.5',
                      type='string', help='Set zoom factor. Default is 0.5')

    #	Get command line options

    (options, args) = parser.parse_args()

    fits_dir = options.fits_dir
    target = options.target
    auto_mjd = options.auto_mjd
    interval = int(options.interval)
    scale = options.scale
    verbose = options.verbose
    zoom = options.zoom

    if verbose:
        print('auto_mjd = %d' % auto_mjd)
        print('interval = %d' % interval)
        print('scale = %s' % scale)
        print('zoom = %s' % zoom)

    #	Start the display

    if auto_mjd:
        old_sjd = 0
    else:
        s = spds9(fits_dir, target, scale, zoom)

    while True:
        if auto_mjd and (old_sjd != sjd()):
            try:
                print(stat('/data/spectro/%d' % sjd())[ST_MTIME])

                if verbose:
                    print('Setting SJD from %d to %d' % (old_sjd, sjd()))
                old_sjd = sjd()

                s = spds9(None, target, scale, zoom)
                s.update()

            except:
                if verbose:
                    print('No files for SJD %d, retrying...' % sjd())
        #				sleep (interval)
        #				next
        else:
            s.update()

        sleep(interval)
