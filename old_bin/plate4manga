#!/usr/bin/env python
#
# Get plate info. Run this script on "sos3" machine.
#
# ver. 09 jan 2010
# ver. 07 feb 2010
# ver. 12 feb 2010  (a format bug fixed)
# ver. 05 mar 2010  (fxpar function is added)
# ver. 04 apr 2010  sos3 changed format3 days ago. Script adopted.
# ver. 04 may 2010  Gzipped files are now supported IN PARALLEL with plain fits
# ver. 30 oct 2010  extended the range of MJDs
# ver. 14 mar 2011  extended the range of MJDs
# ver. 26 may 2012  S/N^2 calculation is PRECISE now. PYFITS is required!
# ver. 04 apr 2013  S/N2 threshold is set to 0.5
# ver. 13 oct 2013  Some old "logfile" have been deleted/retired, e.g. 
#                   for plate 3647, and reading this created errors. Fixed.
# ver  28 aug 2014  Copied to plate4, adjusted MJD serach ranges
# ver. 19 nov 2015  Updated to handle plates 10000
# ver. 18 Oct 2016  Sums only the last plugging exposures, by default.
#                   Sums all if MJDs are explicitly specified
#
# ask dmbiz

import posix,time,sys,string,os
import pyfits


f_tmp = 'search_log.txt'
dir_sos2 = '/data/manga/dos/'
#-file_sos = 'logfile-56{8,9}??.html'
file_sos = 'logfile-5{6,7,8}???.html'
#-file_sos = '*/web/logfile-5{6,7}???.html'

#-dir_sos = '/data/manga/dos/?????/web/'
#-dir_fits = '/data/spectro/'
#------ id_sos = 'observer@sos'
#----- file_sos = 'logfile-5[4,5,6,7]???.html'
#----file_sos = 'logfile-55[1,2,3,4,5,6,7,8,9]??.html'
#---file_sos = 'logfile-5{5,6}???.html'
#--file_sos = 'logfile-56???.html'


#-- h_lim = 2.0
#-h_lim = 0.0
h_lim = 0.5
#==========================================================
#===== The parameter change freedom is finished here =====#
#==========================================================

dir_sos = dir_sos2 + '?????/web/'


tt = str(time.time()) 
Tstamp = tt[len(tt) - 5 : len(tt)]
w_dir = 'tmp' + Tstamp


file_tmp1 = 'logfile_tmp_all.txt' + Tstamp
file_tmp2 = 'logfile_tmp_uniq.txt' + Tstamp
file_tmp3 = 'logfile_tmp_uniq2.txt' + Tstamp
file_tmp4 = 'logfile_tmp_uniq3.txt' + Tstamp

if len(sys.argv) <= 1:
  print "************************************"
  print "== Syntax: =="
  print " ~/plate4manga 1111"
  print "   where 1111 is your plate number,"
  print "   OR"
  print " ~/plate4manga 1111 55555"
  print "   where 55555 is MJD which you need"
  print "   to sum separately"
  print " ~/plate4manga 1111 55555,55556,55557 "
  print "   to sum ONLY those MJDs. Separate them "
  print "   by coma, with NO spaces!"
  print "************************************"
  print
else:
        
  plate = sys.argv[1]

  if len(sys.argv) == 3:
    mjd_task = sys.argv[2]
    mjd_task_a = mjd_task.split(',')
    n_mjd_task = len(mjd_task_a)
  
  def sum(arr):
    s = 0.
    for i in range(len(arr)):
      s = s + arr[i]
    return s


  def allindices(st12, sub):
    ind = list([])
    for i in range(len(st12)):
      if st12[i] == sub:
        ind.append(i)
    return ind

  def striptags(st10):
    j1 = allindices(st10,'<')
    j2 = allindices(st10,'>')
  

    st11 = ''
    for i3 in range(len(j1) - 1 ):
      #--st11.append(st10[j2[i3] : j1[i3+1]].strip(' '))
      st12 = st10[j2[i3] + 1 : j1[i3+1] - 1]
      st13 = string.strip(st12)
      #-st13 = st12.strip(' ')
    
      if st13 != '':
        st11 = st11 + string.strip(st13) + ' '
     
    return st11


  def get_sn(fil, a_fil, a_sn):
    for i in range(len(a_fil) ):
      if fil == string.strip( a_fil[i] ):
         return float( a_sn[i] )
    return 0.

  def get_tp(fil, a_fil, a_texp, a_plug):
    for i in range(len(a_fil) ):
      if fil == a_fil[i]:
        #-return float(a_texp[i]),a_plug[i][11:24]
        return float(a_texp[i]),a_plug[i][8:21]
    return 0., '---'



  def fxpar(fits_file,kword,gz):
    tt = str(time.time()) 
    Tstamp = tt[len(tt) - 5 : len(tt)]
    file_tmp4 = 'logfile_tmp_uniq3.txt' + Tstamp  
    
    if gz == '0':
      #- str9 = 'dd if=' + fits_file + ' bs=80 count=90 skip=1 status=noxfer 2> /dev/null > ' + file_tmp4 
      str9 = 'dd if=' + fits_file + ' bs=80 count=90 skip=1 status=noxfer 2> /dev/null > ' + file_tmp4 

      posix.system(str9)
      fop9 = open(file_tmp4, 'r')
      inList9 = fop9.readlines()
      st14 = inList9[0]
      j3 = string.find(st14, kword)
      st15 = st14[j3+11:j3+24]

      str10 = 'rm -f ' + file_tmp4
      posix.system(str10)    

    if gz == '1':
      #- str9 = 'dd if=' + fits_file + ' bs=80 count=90 skip=1 status=noxfer 2> /dev/null > ' + file_tmp4 
      str9 = 'dd if=' + fits_file + ' bs=2880 count=1 status=noxfer 2> /dev/null | gunzip 2> /dev/null | dd bs=80 count=90 skip=1 status=noxfer 2> /dev/null > ' + file_tmp4 

      posix.system(str9)
      fop9 = open(file_tmp4, 'r')
      inList9 = fop9.readlines()
      st14 = inList9[0]
      j3 = string.find(st14, kword)
      st15 = st14[j3+11:j3+24]

      str10 = 'rm -f ' + file_tmp4
      posix.system(str10)

    return st15
                                                        

  n_str3 = len(dir_sos)

  str3 = 'grep ' + plate + ' ' + dir_sos + file_sos + \
  ' | grep -i title | grep Plate | cut -c ' + str(n_str3 + 1) + '-' + \
  str(n_str3 + 18) + ' > ' + file_tmp1 + \
  ' && uniq ' + file_tmp1 + ' > ' + file_tmp2

  posix.system(str3)
  time.sleep(0.1)

  str6 = 'grep html ' + file_tmp2 + ' > ' + file_tmp3
  posix.system(str6)
  time.sleep(0.1)

  print " "
  print "(S/N)^2 accumulated for plate",plate, " \n"

  b1 = list([])
  r1 = list([])
  b2 = list([])
  r2 = list([])
  mjd2 = list([])
  texp = list([])
  qual = list([])
  plug_file = list([])

  #--- Read File ---
  f_tmp = file_tmp3

  fop1 = open(f_tmp, 'r')

  inList = fop1.readlines()

  for st in inList:
    if st[0:7] == 'logfile':
  
    #--- work with file here
      fil = st[0:18]
      print "---- " + fil + " ----"
  
      #--- MJD ---
      mjd = fil[8:13]

      #-d- fil30 = dir_sos2 + '/' + mjd + '/logfile-' + mjd + '.fits'
      fil30 = dir_sos2 + mjd + '/logfile-' + mjd + '.fits'


      try:
        f = pyfits.open(fil30)
        ascience = f[4].data

        #--- Parse logfiles
        n = len(inList)

        #-d- fil3 = dir_sos2 + '/' + mjd + '/' + fil
        fil3 = dir_sos2 + mjd + '/web/' + fil

        fop2 = open(fil3, 'r')
        flag_st = 0
        flag_end = 0
        inList2 = fop2.readlines()

        for st in inList2:
          #-if st[9:18] == 'PLATE' + plate:  #-- Begin parse this chapter --
          if (len(plate) ==4 and st[9:18] == 'PLATE' + plate) or (len(plate) == 5 and st[9:19] == 'PLATE' + plate) :  #-- Begin parse this chapter --
            flag_st = 1
            flag_end = 1
          if st[2:7] == 'TABLE':
            flag_end = 0

          st3 = striptags(st)
          st4 = st3[17:23]

          if st4 == '(S/N)^' and flag_st == 1 and st[11:18] == 'SCIENCE' and flag_end == 1:

            st_stripped = striptags(st)
            namez_st_sp = string.split(st_stripped, ' ')

            if len(namez_st_sp) > 10:
              if namez_st_sp[10] == 'excellent':
                b1_st,r1_st,b2_st,r2_st,texp_st = namez_st_sp[2],namez_st_sp[3],namez_st_sp[4],namez_st_sp[5],namez_st_sp[6]

                if len(namez_st_sp) > 10:

                   b1_0 = get_sn('sdR-b1-' +  namez_st_sp[0][8:16] + '.fit.gz', ascience.field(0),ascience.field(26) )
                   b2_0 = get_sn('sdR-b2-' +  namez_st_sp[0][8:16] + '.fit.gz', ascience.field(0),ascience.field(26) )
                   r1_0 = get_sn('sdR-r1-' +  namez_st_sp[0][8:16] + '.fit.gz', ascience.field(0),ascience.field(26) )
                   r2_0 = get_sn('sdR-r2-' +  namez_st_sp[0][8:16] + '.fit.gz', ascience.field(0),ascience.field(26) )

                   texp_0,plug_0 = get_tp('sdR-b1-' +  namez_st_sp[0][8:16] + '.fit.gz', ascience.field(0), ascience.field(6), ascience.field(1))


                   #mjd2.append(mjd)
                   #b1.append(float(string.strip(b1_st)))
                   #b2.append(float(string.strip(b2_st)))
                   #r1.append(float(string.strip(r1_st)))
                   #r2.append(float(string.strip(r2_st)))
                   #texp.append(float(string.strip(texp_st)))

                   mjd2.append(mjd)
                   b1.append(b1_0)
                   b2.append(b2_0)
                   r1.append(r1_0)
                   r2.append(r2_0)
                   texp.append(texp_0)
                   plug_file.append(plug_0)



                   #namez_st_sp_1 = namez_st_sp[0]  
                   #fil_fits = dir_fits + mjd + '/sdR-b1-' + namez_st_sp_1[8:16] + '.fit'
                   #if os.path.isfile(fil_fits):
                   #  plug_file0 = fxpar(fil_fits,'NAME   ','0')
                   #  if plug_file0 == '':
                   #    plug_file0 = 'no_info'
                   #  plug_file.append(plug_file0)
                   #else:
                   # fil_fits = fil_fits + '.gz'
                   # if os.path.isfile(fil_fits):
                   #   plug_file0 = fxpar(fil_fits,'NAME   ','1')
                   #   if plug_file0 == '':
                   #     plug_file0 = 'no_info'
                   #   plug_file.append(plug_file0)
      except:
        pass

  fop1.close()

  print "---------------------------------------------------------------"
  print " MJD    b1     r1     b2     r2     Texp    Sum      Plugfile"
  print "---------------------------------------------------------------"


  sum2_b1,sum2_r1,sum2_b2,sum2_r2,sum2_texp = 0.,0.,0.,0.,0.
  sum3_b1,sum3_r1,sum3_b2,sum3_r2,sum3_texp = 0.,0.,0.,0.,0.

  for i in range(len(mjd2)):
    if len(sys.argv) < 3:
      print '%s %6.2f %6.2f %6.2f %6.2f %6.1f %7.2f  %s' % ( mjd2[i], b1[i],r1[i], b2[i], r2[i], texp[i], b1[i]+r1[i]+b2[i]+r2[i], plug_file[i])

      if b1[i] >= h_lim and b2[i] >= h_lim and r1[i] >= h_lim and r2[i] >= h_lim:
      #--if b1[i] >= h_lim and b2[i] >= h_lim and r1[i] >= h_lim and r2[i] >= h_lim and plug_file[i] == plug_file[-1]:

        sum2_b1 = sum2_b1 + b1[i]
        sum2_r1 = sum2_r1 + r1[i]
        sum2_b2 = sum2_b2 + b2[i]
        sum2_r2 = sum2_r2 + r2[i]
        sum2_texp = sum2_texp + texp[i]

      sum3_b1 = sum3_b1 + b1[i]
      sum3_r1 = sum3_r1 + r1[i]
      sum3_b2 = sum3_b2 + b2[i]         
      sum3_r2 = sum3_r2 + r2[i]                  
      sum3_texp = sum3_texp + texp[i]    


    if len(sys.argv) == 3:
      for mjd_task3 in mjd_task_a:
        if mjd2[i] == mjd_task3 and mjd_task3 != "":
          print '%s %6.2f %6.2f %6.2f %6.2f %6.1f %6.2f  %s' % ( mjd2[i], b1[i],r1[i], b2[i], r2[i], texp[i], b1[i]+r1[i]+b2[i]+r2[i], plug_file[i])

          if b1[i] >= h_lim and b2[i] >= h_lim and r1[i] >= h_lim and r2[i] >= h_lim:
            sum2_b1 = sum2_b1 + b1[i]
            sum2_r1 = sum2_r1 + r1[i]
            sum2_b2 = sum2_b2 + b2[i]
            sum2_r2 = sum2_r2 + r2[i]
            sum2_texp = sum2_texp + texp[i]

      sum3_b1 = sum3_b1 + b1[i]
      sum3_r1 = sum3_r1 + r1[i]
      sum3_b2 = sum3_b2 + b2[i]
      sum3_r2 = sum3_r2 + r2[i]
      sum3_texp = sum3_texp + texp[i]
                                             
  print "---------------------------------------------------------------"
  print 's/n^2=%6.2f %6.2f %6.2f %6.2f %7.1f  --> %6.2f [above %4.2f]' %\
  (sum2_b1, sum2_r1,sum2_b2,sum2_r2,sum2_texp,sum2_b1+sum2_r1+sum2_b2+sum2_r2,h_lim)

  print "---------------------------------------------------------------"
  print 'Average  b:  %6.2f    r:  %6.2f' % (0.5*(sum2_b1 + sum2_b2) , 0.5*(sum2_r1 + sum2_r2))

  print "---------------------------------------------------------------"

  if len(sys.argv) < 3:
    print "Important change: only plugging %s is summed" % plug_file[-1] 
    print "if no MJD[s] are specified explicitly"

  st_rm1 = 'rm -f ' + file_tmp1 + ' ' + file_tmp2 + ' ' + file_tmp3 + ' ' + file_tmp4
  posix.system(st_rm1)
  #-d- print "tmp files removed \n"
  print '\n'
