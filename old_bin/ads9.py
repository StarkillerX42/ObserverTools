#!/usr/bin/env python
'''
Description:	Opens and continuously updates ds9 with the latest raw APOGEE file

History:		Jun 21, 2011	Jon Brinkmann	Apache Point Observatory
				Created file from spds9.py

Notes:			Uses the latest directory and file in /summary-ics
'''
from dircache import listdir
from ds9 import *
from optparse import OptionParser
from os import getpid, path, stat
from stat import S_ISDIR, ST_MODE, ST_MTIME
from time import sleep, time

verbose = False
default_dir = '/summary-ics'

class ads9 :
	'''Displays the last image from the guider camera in ds9'''

	def __init__ (self, fits_dir='', target='', scale='histequ', zoom='fit') :

#	Constants and variables

		self.last_file = ''

#	Arguments

		if fits_dir :
			self.dir = fits_dir
		else :
			self.dir = default_dir

		if target :
			self.target = target
		else :
			self.target = 'ads9.%s' % getpid()

		self.scale = scale
		self.zoom = zoom

		if verbose :
			print('dir = %s\ntarget = %s\nscale = %s\nzoom = %s' % \
				(self.dir, self.target, self.scale, self.zoom))

#	Initialize

		self.ds9 = ds9 (self.target)

	def is_fits (self, filename) :
		'''Returns whether a file is a FITS file based on its extension'''

		length = len (filename)
		if filename.rfind ('.fit') == (length - 4) or \
				filename.rfind ('.fits') == (length - 5) or \
				filename.rfind ('.fit.gz') == (length - 7) or \
				filename.rfind ('.fits.gz') == (length - 8) :
			return True
		else :
			return False

	def latest_fits_dir (self) :
		'''Returns the latest sub-directory'''

		max_time = -1
		dirname = ''

#	Obtain the files in the directory and add the full path to them

		for file in listdir (self.dir) :
			file = path.join (self.dir, file)
			statinfo = stat (file)
#			print max_time, file, S_ISDIR (statinfo[ST_MODE])

			if S_ISDIR (statinfo[ST_MODE]) :

#	Store the name and mtime of only the latest FITS file

				mtime = statinfo[ST_MTIME]
#				print max_time, file, mtime
				if max_time < mtime :
					dirname = file
					max_time = mtime

		return dirname

	def latest_fits_file (self, pattern) :
		'''Returns the latest FITS file matching <pattern>'''

		max_time = -1
		fits_filename = ''

#	Obtain the files in the directory and add the full path to them

		dir = self.latest_fits_dir()

#		print 'dir = ', dir

		for file in listdir (dir) :
			file = path.join (dir, file)

#	See if the file name matches the pattern and the file is a FITS file

			if (file.find (pattern) > 0) and self.is_fits (file) :

#	Store the name and mtime of only the latest FITS file

				mtime = stat (file)[ST_MTIME]
#				print max_time, file, mtime
				if max_time < mtime :
					fits_filename = file
					max_time = mtime

		return fits_filename
#		return sorted (fits_files.items(), key=lambda (k,v): (v,k), reverse=True)[0][0]

	def display (self, file, frame) :
		'''Display <file> in <frame> with optional scaling and zoom'''

		if frame >= 0 and file != '' :
			self.ds9.set ('frame %s' % frame)
			self.ds9.set ('file %s' % file)

			if zoom :
				self.ds9.set ('zoom to %s' % self.zoom)

			if scale :
				self.ds9.set ('scale %s' % self.scale)

	def update (self) :
		'''Update the display'''

		file = self.latest_fits_file ('apRaw')
		if verbose :
			print('latest fits file = %s, last fits file = %s' % (file, self.last_file))

		if file != self.last_file :
			if verbose :
				print('displaying %s' % file)
			self.display (file, 0)
			self.last_file = file

# If run as a program, start here

if __name__ == '__main__' :

#	Define command line options

	parser = OptionParser (version="%prog 1.0")
	parser.add_option ('-d', '--directory', dest='fits_dir', default=None,
		type='string', help='Set FITS data directory. Default is %s/<SJD>' % default_dir)
	parser.add_option ('-t', '--target', dest='target', default=None,
		type='string', help='Set ds9 target. Default is autogenerated.')
	parser.add_option ('-i', '--interval', dest='interval', default=60,
		type='int', help='Set the refresh rate.	Default is 5 seconds. \
			Refreshes will be this number of seconds apart.')
	parser.add_option ('-s', '--scale', dest='scale', default='histequ',
		type='string', help='Set scaling. Default is "histequ"')
	parser.add_option('-v', '--verbose', action='store_true', dest='verbose',
		default=False, help='Be verbose. Default is to be quiet.')
	parser.add_option ('-z', '--zoom', dest='zoom', default='1.0',
		type='string', help='Set zoom factor. Default is 1.0')

#	Get command line options

	(options, args) = parser.parse_args()

	fits_dir = options.fits_dir
	target = options.target
	interval = int (options.interval)
	scale = options.scale
	verbose = options.verbose
	zoom = options.zoom

	if verbose :
		print('interval = %d' % interval)
		print('scale = %s' % scale)
		print('zoom = %s' % zoom)

#	Start the display

	a = ads9 (fits_dir, target, scale, zoom)

	while (True) :
		a.update()

		sleep (interval)
